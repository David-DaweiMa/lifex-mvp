const fs = require('fs-extra');
const path = require('path');

async function copyBuildOutput() {
  try {
    const sourcePath = path.join(__dirname, 'packages', 'web', '.next');
    const targetPath = path.join(__dirname, '.next');
    
    console.log('üìã ÂºÄÂßãÂ§çÂà∂ÊûÑÂª∫ËæìÂá∫...');
    console.log(`Ê∫êË∑ØÂæÑ: ${sourcePath}`);
    console.log(`ÁõÆÊ†áË∑ØÂæÑ: ${targetPath}`);
    
    // Ê£ÄÊü•ÊòØÂê¶Âú®VercelÁéØÂ¢É
    const isVercel = process.env.VERCEL === '1' || process.env.VERCEL_ENV;
    console.log(`üåê ÈÉ®ÁΩ≤ÁéØÂ¢É: ${isVercel ? 'Vercel' : 'Êú¨Âú∞'}`);
    
    // Ê£ÄÊü•Ê∫êÁõÆÂΩïÊòØÂê¶Â≠òÂú®
    if (!fs.existsSync(sourcePath)) {
      console.error('‚ùå Ê∫êÁõÆÂΩï‰∏çÂ≠òÂú®:', sourcePath);
      process.exit(1);
    }
    
    // Âà†Èô§ÁõÆÊ†áÁõÆÂΩïÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
    if (fs.existsSync(targetPath)) {
      await fs.remove(targetPath);
      console.log('üóëÔ∏è  Â∑≤Âà†Èô§ÊóßÁöÑÁõÆÊ†áÁõÆÂΩï');
    }
    
    // Â§çÂà∂Êñá‰ª∂
    await fs.copy(sourcePath, targetPath);
    console.log('‚úÖ ÊûÑÂª∫ËæìÂá∫Â§çÂà∂ÂÆåÊàêÔºÅ');
    
    // Ê∑±Â∫¶Ê∏ÖÁêÜÂèØËÉΩÂØºËá¥ÈóÆÈ¢òÁöÑÊñá‰ª∂ÂíåÁõÆÂΩï
    const problematicPaths = [
      path.join(targetPath, 'node_modules'),
      path.join(targetPath, 'cache'),
      path.join(targetPath, '.swc'),
      path.join(targetPath, 'trace')
    ];
    
    for (const problematicPath of problematicPaths) {
      try {
        if (fs.existsSync(problematicPath)) {
          await fs.remove(problematicPath);
          console.log(`üßπ Â∑≤Ê∏ÖÁêÜ: ${path.basename(problematicPath)}`);
        }
      } catch (cleanupError) {
        console.log(`‚ö†Ô∏è  Ê∏ÖÁêÜÂ§±Ë¥•: ${path.basename(problematicPath)}`);
      }
    }
    
    // VercelÁéØÂ¢ÉÁâπÊÆäÂ§ÑÁêÜ
    if (isVercel) {
      console.log('üöÄ VercelÁéØÂ¢ÉÁâπÊÆäÂ§ÑÁêÜ...');
      
      // ÁßªÈô§ÊâÄÊúâÂèØËÉΩÁöÑSWCÁõ∏ÂÖ≥Êñá‰ª∂
      const swcPatterns = [
        path.join(targetPath, '**', '@swc'),
        path.join(targetPath, '**', '.swc'),
        path.join(targetPath, '**', 'swc.config.js'),
        path.join(targetPath, '**', 'swc.config.json')
      ];
      
      for (const pattern of swcPatterns) {
        try {
          const files = await fs.glob(pattern);
          for (const file of files) {
            await fs.remove(file);
            console.log(`üßπ Â∑≤Ê∏ÖÁêÜSWCÊñá‰ª∂: ${path.basename(file)}`);
          }
        } catch (error) {
          // ÂøΩÁï•ÈîôËØØÔºåÁªßÁª≠Â§ÑÁêÜ
        }
      }
    }
    
    // È™åËØÅÂ§çÂà∂ÁªìÊûú
    if (fs.existsSync(path.join(targetPath, 'routes-manifest.json'))) {
      console.log('‚úÖ routes-manifest.json Êñá‰ª∂Â∑≤ÊâæÂà∞');
    } else {
      console.log('‚ö†Ô∏è  routes-manifest.json Êñá‰ª∂Êú™ÊâæÂà∞');
    }
    
    // ÂàóÂá∫ÁõÆÊ†áÁõÆÂΩïÂÜÖÂÆπ
    const files = await fs.readdir(targetPath);
    console.log(`üìÅ ÁõÆÊ†áÁõÆÂΩïÂåÖÂê´ ${files.length} ‰∏™È°πÁõÆ`);
    
    // È™åËØÅÂÖ≥ÈîÆÊñá‰ª∂
    const criticalFiles = [
      'routes-manifest.json',
      'build-manifest.json',
      'prerender-manifest.json'
    ];
    
    for (const file of criticalFiles) {
      const filePath = path.join(targetPath, file);
      if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${file} Â≠òÂú®`);
      } else {
        console.log(`‚ö†Ô∏è  ${file} Áº∫Â§±`);
      }
    }
    
    // ÊúÄÁªàÈ™åËØÅ - Á°Æ‰øùÊ≤°Êúânode_modules
    const finalCheck = path.join(targetPath, 'node_modules');
    if (!fs.existsSync(finalCheck)) {
      console.log('‚úÖ Á°ÆËÆ§Ê≤°Êúânode_modulesÁõÆÂΩï');
    } else {
      console.log('‚ö†Ô∏è  Ë≠¶Âëä: node_modulesÁõÆÂΩï‰ªçÁÑ∂Â≠òÂú®');
    }
    
    // VercelÁéØÂ¢ÉÊúÄÁªàÊ£ÄÊü•
    if (isVercel) {
      console.log('üîç VercelÁéØÂ¢ÉÊúÄÁªàÊ£ÄÊü•...');
      const allFiles = await fs.readdir(targetPath, { recursive: true });
      const swcFiles = allFiles.filter(file => 
        typeof file === 'string' && 
        (file.includes('@swc') || file.includes('.swc') || file.includes('swc'))
      );
      
      if (swcFiles.length === 0) {
        console.log('‚úÖ Á°ÆËÆ§Ê≤°ÊúâSWCÁõ∏ÂÖ≥Êñá‰ª∂');
      } else {
        console.log(`‚ö†Ô∏è  ÂèëÁé∞ ${swcFiles.length} ‰∏™SWCÁõ∏ÂÖ≥Êñá‰ª∂`);
        swcFiles.forEach(file => console.log(`   - ${file}`));
      }
    }
    
  } catch (error) {
    console.error('‚ùå Â§çÂà∂Â§±Ë¥•:', error);
    process.exit(1);
  }
}

copyBuildOutput();
